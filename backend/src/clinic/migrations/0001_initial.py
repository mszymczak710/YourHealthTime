# Generated by Django 5.0 on 2025-04-08 19:32

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import clinic.fields
import clinic.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=2, unique=True, verbose_name="code"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="name"),
                ),
            ],
            options={
                "verbose_name": "country",
                "verbose_name_plural": "countries",
            },
        ),
        migrations.CreateModel(
            name="Disease",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "disease",
                "verbose_name_plural": "diseases",
            },
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "ingredient",
                "verbose_name_plural": "ingredients",
            },
        ),
        migrations.CreateModel(
            name="Medicine",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "medicine",
                "verbose_name_plural": "medicines",
            },
        ),
        migrations.CreateModel(
            name="MedicineForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "medicine form",
                "verbose_name_plural": "medicine forms",
            },
        ),
        migrations.CreateModel(
            name="MedicineType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "medicine type",
                "verbose_name_plural": "medicine types",
            },
        ),
        migrations.CreateModel(
            name="OfficeType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "office type",
                "verbose_name_plural": "office types",
            },
        ),
        migrations.CreateModel(
            name="Specialization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "specialization",
                "verbose_name_plural": "specializations",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(7)
                        ],
                        verbose_name="email address",
                    ),
                ),
                (
                    "email_confirmed",
                    models.BooleanField(
                        default=False, verbose_name="email confirmed"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_first_name",
                                message="Imię musi zaczynać się wielką literą, a następnie zawierać małe litery.",
                                regex="^[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż]*(?:[-' ][A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż]+)*$",
                            ),
                            django.core.validators.MinLengthValidator(3),
                        ],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_last_name",
                                message="Nazwisko musi zaczynać się wielką literą, a następnie zawierać małe litery.",
                                regex="^[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż]*(?:[-' ][A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż]+)*$",
                            ),
                            django.core.validators.MinLengthValidator(2),
                        ],
                        verbose_name="last name",
                    ),
                ),
                (
                    "register_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="register date"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False, verbose_name="is active"
                    ),
                ),
                (
                    "is_logged_in",
                    models.BooleanField(
                        default=False, verbose_name="is logged in"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, verbose_name="is staff"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False, verbose_name="is superuser"
                    ),
                ),
                (
                    "password_reset_sent_at",
                    models.DateTimeField(
                        null=True, verbose_name="password reset sent at"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("P", "Patient"),
                            ("N", "Nurse"),
                            ("D", "Doctor"),
                            ("A", "Admin"),
                        ],
                        default="P",
                        max_length=1,
                        verbose_name="role",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_street",
                                message="Nazwa ulicy musi zaczynać się wielką literą i zawierać wyłącznie litery, spacje i myślniki.",
                                regex="^[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż -]*(\\s[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż -]*)*$",
                            ),
                            django.core.validators.MinLengthValidator(3),
                        ],
                        verbose_name="street",
                    ),
                ),
                (
                    "house_number",
                    models.CharField(
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_house_number",
                                message="Numer domu musi zaczynać się od cyfry innej niż zero, opcjonalnie może zawierać do dwóch dodatkowych cyfr i kończyć się pojedynczą literą.",
                                regex="^[1-9]\\d{0,2}[A-Za-z]?$",
                            )
                        ],
                        verbose_name="house number",
                    ),
                ),
                (
                    "apartment_number",
                    models.CharField(
                        blank=True,
                        max_length=4,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_apartment_number",
                                message="Numer mieszkania musi być liczbą z zakresu od 1 do 999.",
                                regex="^[1-9]\\d{0,2}$",
                            )
                        ],
                        verbose_name="apartment number",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_city",
                                message="Nazwa miasta musi zaczynać się wielką literą i zawierać wyłącznie litery, spacje i myślniki.",
                                regex="^[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż -]*(\\s[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż -]*)*$",
                            ),
                            django.core.validators.MinLengthValidator(3),
                        ],
                        verbose_name="city",
                    ),
                ),
                (
                    "post_code",
                    models.CharField(
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_post_code",
                                message="Nieprawidłowy format kodu pocztowego. Wprowadź poprawny kod w formacie XX-XXX.",
                                regex="^\\d{2}-\\d{3}$",
                            )
                        ],
                        verbose_name="post code",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="addresses",
                        to="clinic.country",
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "address",
                "verbose_name_plural": "addresses",
            },
        ),
        migrations.CreateModel(
            name="Doctor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "job_execution_number",
                    models.CharField(
                        max_length=7,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_job_execution_number",
                                message="Numer wykonywania zawodu musi składać się z 7 cyfr i nie może zaczynać się od 0.",
                                regex="^[1-9]\\d{6}$",
                            )
                        ],
                        verbose_name="job execution number",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="doctor",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                (
                    "specializations",
                    models.ManyToManyField(
                        related_name="doctors",
                        to="clinic.specialization",
                        verbose_name="specializations",
                    ),
                ),
            ],
            options={
                "verbose_name": "doctor",
                "verbose_name_plural": "doctors",
            },
        ),
        migrations.CreateModel(
            name="Dosage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="amount"
                    ),
                ),
                (
                    "frequency",
                    models.CharField(max_length=100, verbose_name="frequency"),
                ),
                (
                    "medicine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dosages",
                        to="clinic.medicine",
                        verbose_name="medicine",
                    ),
                ),
            ],
            options={
                "verbose_name": "dosage",
                "verbose_name_plural": "dosages",
            },
        ),
        migrations.AddField(
            model_name="medicine",
            name="form",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="clinic.medicineform",
                verbose_name="form",
            ),
        ),
        migrations.CreateModel(
            name="MedicineIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=3, max_digits=9, verbose_name="quantity"
                    ),
                ),
                ("unit", models.CharField(max_length=10, verbose_name="unit")),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="medicine_ingredients",
                        to="clinic.ingredient",
                        verbose_name="ingredient",
                    ),
                ),
                (
                    "medicine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="medicine_ingredients",
                        to="clinic.medicine",
                        verbose_name="medicine",
                    ),
                ),
            ],
            options={
                "verbose_name": "medicine ingredient",
                "verbose_name_plural": "medicine ingredients",
            },
        ),
        migrations.AddField(
            model_name="medicine",
            name="active_ingredients",
            field=models.ManyToManyField(
                through="clinic.MedicineIngredient",
                to="clinic.ingredient",
                verbose_name="active ingredients",
            ),
        ),
        migrations.AddField(
            model_name="medicine",
            name="type_of_medicine",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="medicines",
                to="clinic.medicinetype",
                verbose_name="type of medicine",
            ),
        ),
        migrations.CreateModel(
            name="Nurse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "nursing_license_number",
                    models.CharField(
                        max_length=7,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_nursing_license_number",
                                message="Numer licencji pielęgniarskiej musi składać się z 7 cyfr i nie może zaczynać się od 0.",
                                regex="^[1-9]\\d{6}$",
                            )
                        ],
                        verbose_name="nursing license number",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nurse",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "nurse",
                "verbose_name_plural": "nurses",
            },
        ),
        migrations.CreateModel(
            name="Office",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                ("floor", models.IntegerField(verbose_name="floor")),
                (
                    "room_number",
                    models.IntegerField(verbose_name="room number"),
                ),
                (
                    "office_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="offices",
                        to="clinic.officetype",
                        verbose_name="room type",
                    ),
                ),
            ],
            options={
                "verbose_name": "office",
                "verbose_name_plural": "offices",
            },
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "pesel",
                    models.CharField(
                        max_length=11,
                        unique=True,
                        validators=[clinic.validators.pesel_validator],
                        verbose_name="PESEL",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_phone_number",
                                message="Nieprawidłowy format numeru telefonu. Wprowadź poprawny numer telefonu.",
                                regex="^\\+?(\\d{1,3}[-\\s]?)?(\\(0\\d{1,2}\\)|0\\d{1,2}[-\\s]?)?(\\d{1,4}[-\\s]?){2,3}\\d{1,4}$",
                            ),
                            django.core.validators.MinLengthValidator(7),
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Mężczyzna"), ("K", "Kobieta")],
                        max_length=1,
                        verbose_name="gender",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="birth date"
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="patients",
                        to="clinic.address",
                        verbose_name="address",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="patient",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "patient",
                "verbose_name_plural": "patients",
            },
        ),
        migrations.CreateModel(
            name="Prescription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                (
                    "prescription_code",
                    models.CharField(
                        blank=True,
                        max_length=4,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_prescription_code",
                                message="Kod recepty musi składać się z 4 cyfr.",
                                regex="^\\d{4}$",
                            )
                        ],
                        verbose_name="prescription code",
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        auto_now_add=True, verbose_name="issue date"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(null=True, verbose_name="expiry date"),
                ),
                (
                    "description",
                    models.TextField(
                        max_length=500, verbose_name="description"
                    ),
                ),
                (
                    "doctor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="prescriptions",
                        to="clinic.doctor",
                        verbose_name="doctor",
                    ),
                ),
                (
                    "medicines",
                    models.ManyToManyField(
                        related_name="prescriptions",
                        through="clinic.Dosage",
                        to="clinic.medicine",
                        verbose_name="medicines",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="prescriptions",
                        to="clinic.patient",
                        verbose_name="patient",
                    ),
                ),
            ],
            options={
                "verbose_name": "prescription",
                "verbose_name_plural": "prescriptions",
            },
        ),
        migrations.AddField(
            model_name="dosage",
            name="prescription",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dosages",
                to="clinic.prescription",
                verbose_name="prescription",
            ),
        ),
        migrations.CreateModel(
            name="Visit",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "readable_id",
                    clinic.fields.AutoIncrementField(
                        unique=True, verbose_name="readable id"
                    ),
                ),
                ("date", models.DateTimeField(verbose_name="visit date")),
                (
                    "duration_in_minutes",
                    models.IntegerField(verbose_name="duration [min]"),
                ),
                (
                    "visit_status",
                    models.CharField(
                        choices=[
                            ("S", "Scheduled"),
                            ("I", "In progress"),
                            ("C", "Completed"),
                        ],
                        default="S",
                        max_length=1,
                        verbose_name="visit status",
                    ),
                ),
                (
                    "is_remote",
                    models.BooleanField(
                        default=False, verbose_name="is remote"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "predicted_end_date",
                    models.DateTimeField(verbose_name="predicted end date"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="created at"
                    ),
                ),
                (
                    "disease",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visits",
                        to="clinic.disease",
                        verbose_name="disease",
                    ),
                ),
                (
                    "doctor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visits",
                        to="clinic.doctor",
                        verbose_name="doctor",
                    ),
                ),
                (
                    "office",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visits",
                        to="clinic.office",
                        verbose_name="office",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visits",
                        to="clinic.patient",
                        verbose_name="patient",
                    ),
                ),
            ],
            options={
                "verbose_name": "visit",
                "verbose_name_plural": "visits",
            },
        ),
        migrations.AddField(
            model_name="prescription",
            name="visit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="prescriptions",
                to="clinic.visit",
                verbose_name="visit",
            ),
        ),
        migrations.AddField(
            model_name="patient",
            name="doctors",
            field=models.ManyToManyField(
                related_name="patients",
                through="clinic.Visit",
                to="clinic.doctor",
                verbose_name="doctors",
            ),
        ),
    ]
