"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

import colorlog
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

dotenv_path = os.path.join(BASE_DIR, ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

oeg = os.environ.get

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = oeg("DJANGO_SECRET_KEY")
RECAPTCHA_SECRET_KEY = oeg("RECAPTCHA_SECRET_KEY")
RECAPTCHA_VERIFY_URL = oeg("RECAPTCHA_VERIFY_URL")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

FRONTEND_URL = oeg("FRONTEND_URL", "http://localhost:4200")

# Application definition

INSTALLED_APPS = [
    "clinic.apps.ClinicConfig",
    "corsheaders",
    "drf_spectacular",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_countries",
    "django_extensions",
    "rest_framework",
    "django_filters",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

PASSWORD_RESET_TIMEOUT = 60 * 60

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": oeg("DB_NAME"),
        "USER": oeg("DB_USER"),
        "PASSWORD": oeg("DB_PASSWORD"),
        "HOST": oeg("DB_HOST", "database"),
        "PORT": oeg("DB_PORT", 5432),
        "TEST": {
            "NAME": oeg("TEST_DB_NAME"),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "pl"

TIME_ZONE = "Europe/Warsaw"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("pl", _("Polish")),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:4200",
]

TESTING = "pytest" in sys.argv[0]

if TESTING:
    DEFAULT_THROTTLE_CLASSES = []
    DEFAULT_THROTTLE_RATES = {
        "anon": None,
        "user": None,
        "doctor": None,
        "nurse": None,
        "patient": None,
    }
else:
    DEFAULT_THROTTLE_CLASSES = [
        "clinic.throttling.DoctorRateThrottle",
        "clinic.throttling.NurseRateThrottle",
        "clinic.throttling.PatientRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ]
    DEFAULT_THROTTLE_RATES = {
        "anon": "100/hour",
        "user": "1000/hour",
        "doctor": "1000/hour",
        "nurse": "750/hour",
        "patient": "500/hour",
    }

REST_FRAMEWORK = {
    "NON_FIELD_ERRORS_KEY": "non_field_errors",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_THROTTLE_CLASSES": DEFAULT_THROTTLE_CLASSES,
    "DEFAULT_THROTTLE_RATES": DEFAULT_THROTTLE_RATES,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
}

AUTH_USER_MODEL = "clinic.User"

AUTHENTICATION_BACKENDS = [
    "clinic.auth.backends.EmailBackend",
]

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = oeg("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = oeg("EMAIL_PORT", 587)
EMAIL_USE_TLS = oeg("EMAIL_USE_TLS", "True")
EMAIL_HOST_USER = oeg("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = oeg("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = oeg("DEFAULT_FROM_EMAIL")
EMAIL_FILE_PATH = oeg("EMAIL_FILE_PATH", "/tmp/YourHealthTime-messages")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "colored": {
            "()": colorlog.ColoredFormatter,
            "format": "%(log_color)s%(levelname)s%(reset)s %(message)s",
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            },
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "colored",
        },
    },
    "loggers": {
        "clinic": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.utils.autoreload": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}
SPECTACULAR_SETTINGS = {
    "TITLE": "backend",
    "DESCRIPTION": "API for YourHealthTime",
    "VERSION": "1.0",
    "SCHEMA_PATH_PREFIX": "/api/",
}
